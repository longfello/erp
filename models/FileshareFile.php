<?php

namespace app\models;

use app\components\ModelWithFile;
use Yii;
use yii\helpers\Url;

/**
 * This is the model class for table "fileshare_file".
 *
 * @property integer $id
 * @property integer $parent_id
 * @property string $share_hash
 * @property string $name
 * @property string $original_name
 * @property string $created_at
 * @property string $updated_at
 * @property integer $size
 * @property integer $user_id
 * @property string $password
 *
 * @property FileshareCategory $parent
 * @property User $user
 */
class FileshareFile extends ModelWithFile
{
	public $isPublic  = false;
	public $directory = 'fileshare';

	public $file;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'fileshare_file';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['parent_id', 'size', 'user_id'], 'integer'],
            [['name'], 'required'],
            [['created_at', 'updated_at'], 'safe'],
            [['share_hash', 'name', 'original_name'], 'string', 'max' => 255],
            [['password'], 'string', 'max' => 40],
            [['share_hash'], 'unique'],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => FileshareCategory::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'parent_id' => 'Родительская папка',
            'share_hash' => 'Ключ шаринга',
            'name' => 'Внутренее имя файла',
            'original_name' => 'Имя файла',
            'created_at' => 'Время создания',
            'updated_at' => 'Время модификации',
            'size' => 'Размер',
            'user_id' => 'Владелец',
            'password' => 'Хеш пароля',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(FileshareCategory::className(), ['id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

	public function getIcon($class='', $alt=''){
		$path_parts = pathinfo( $this->name );
		$ext        = isset($path_parts['extension'])?$path_parts['extension']:'';
		return self::getIconByExtension($ext, $class, $alt);
	}

	public static function getIconByExtension($ext, $class = '', $alt = ''){
		$alt = $alt?$alt:$ext;
		$src = '/img/fs/file.png';

		$file       = '/img/ext/'.$ext.'.svg';

		if (file_exists(Yii::getAlias( '@webroot' ).$file)){
			$src = $file;
		}
		$icon = "<img src='{$src}' class='{$class}' alt='{$alt}'>";

		return $icon;
	}

	public function getPreviewThumbnail($file = false, $w = 288, $h = 168){
		// 288x168
		if (!$file || !file_exists($file)){
			$file = Yii::getAlias('@webroot/img/default-preview.png');
		}

		$out_filename = md5($file).sha1($file).'.png';
		$out_path     = '/data/preview/assets/';
		$out_path    .= substr($out_filename, 0, 2).'/';
		$out_path    .= substr($out_filename, 0, 4).'/';
		$out_path    .= $w.'x'.$h.'/';

		if (!is_dir(basedir.$out_path)) {
			mkdir(basedir.$out_path, 0777, true);
		}

		if (!file_exists(basedir.$out_path.$out_filename)) {
			$image=Yii::$app->image->load($file);
			$image->resize($w, $h, \yii\image\drivers\Image::ADAPT)->save(basedir.$out_path.$out_filename);
		}
		return $out_path.$out_filename;
	}

	public function getPreview(){
		$slides = [];
		$path_parts = pathinfo( $this->original_name );
		$ext        = strtolower(isset($path_parts['extension'])?$path_parts['extension']:'');

		if (in_array($ext, ['jpg', 'png', 'gif', 'jpeg', 'bmp'])){
			$url = $this->getPreviewThumbnail($this->getPath().$this->getAttribute('filename'));
			$slides[] = "<img src='".$url."' alt='preview slide'>";
		}

		if (!$slides){
			$url = $this->getPreviewThumbnail(false);
			$slides[] = "<img src='".$url."' alt='preview slide'>";
		}

		return $slides;
	}

	public function getDownloadHash(){
		return md5($this->name).'-'.sha1($this->name);
	}

	public function generateHash($length = 4){
		$hash = Yii::$app->getSecurity()->generateRandomString($length);
//		$hash = substr($hash, 0, 1).$hash;
		if (FileshareFile::findOne(['share_hash' => $hash])) {
			$hash = $this->generateHash($length+1);
		}
		return $hash;
	}

	public function beforeSave( $insert ) {
		if (!$this->user_id) $this->user_id = Yii::$app->user->id;
		return parent::beforeSave( $insert ); // TODO: Change the autogenerated stub
	}

	public function afterSave($insert, $changedAttributes){
		parent::afterSave($insert, $changedAttributes);
		if ($this->parent) {
			$this->parent->recalcSize();
		}
	}

	public function beforeDelete() {
		if (parent::beforeDelete()){
			$file = $this->getPath().$this->id;
			if (file_exists($file)){
				@unlink($file);
			}

			$this->size = 0;
			$this->save();
			if ($this->parent) {
				$this->parent->recalcSize();
			}
			return true;
		}
		return false;
	}

	public function relativeTime(){
		$time = $this->updated_at?$this->updated_at:$this->created_at;
		$time = Yii::$app->formatter->asTimestamp(date(\DateTime::W3C, strtotime($time)));
		if ((time() - $time) > 60*60*24) {
			return "<span title='".Yii::$app->formatter->asDatetime($time)."'>".Yii::$app->formatter->asDatetime($time, 'php:d.m.Y')."</span>";
		} else {
			return Yii::$app->formatter->asRelativeTime($time, time());
		}
	}

	public function moveTemporaryFile(){
		$origin = $this->directory;
		$this->directory = 'temporary';
		$source = $this->getPath().$this->id;

		$this->directory = $origin;
		$target = $this->getPath().$this->id;

		if (file_exists($source)) {
			if (copy($source, $target)){
				$this->size = filesize($target);
				$this->save(false);
				$this->parent->recalcSize();
				unlink($source);
				return true;
			}
		}
		return false;
	}

	public function checkAccess($allowAdmin = false){
		return ($this->user_id == Yii::$app->user->id || ($allowAdmin && Yii::$app->user->can('admin')));
	}

	public function getParentsArray($root, $iteration = 0){
		$elements = [];
		if ($iteration > 6) return $elements;
		$item = FileshareCategory::findOne(['id' => $root]);
		if ($item) {
			$elements[] = [
				'url'   => Url::to(['/backend/fileshare/index', 'root' => $item->id]),
				'label' => $item->name
			];
			$elements = array_merge($this->getParentsArray($item->parent_id, $iteration+1), $elements);
		}
		return $elements;
	}

	public function recalcSize(){
		if ($this->parent) {
			$this->parent->recalcSize();
		}
	}

}

<?php
/**
 * Created by PhpStorm.
 * User: miloslawsky
 * Date: 22.11.16
 * Time: 15:27
 */

namespace app\models;

use borales\extensions\phoneInput\PhoneInputBehavior;
use borales\extensions\phoneInput\PhoneInputValidator;
use dektrium\user\Finder;
use dektrium\user\helpers\Password;
use dektrium\user\Mailer;
use dektrium\user\models\Account;
use dektrium\user\models\Profile;
use dektrium\user\Module;
use yii\bootstrap\Html;

/**
 * User ActiveRecord model.
 *
 * @property bool    $isAdmin
 * @property bool    $isBlocked
 * @property bool    $isConfirmed
 *
 * Database fields:
 * @property integer $id
 * @property string  $username
 * @property string  $email
 * @property string  $unconfirmed_email
 * @property string  $password_hash
 * @property string  $auth_key
 * @property integer $registration_ip
 * @property integer $confirmed_at
 * @property integer $blocked_at
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $flags
 *
 * @property string $first_name
 * @property string $last_name
 * @property string $middle_name
 * @property string $bithday
 * @property string $phone
 * @property integer $position_id
 * @property string $theme
 * @property string $avatar
 *
 * Defined relations:
 * @property Account[] $accounts
 * @property Profile   $profile
 * @property Position   $position
 *
 * Dependencies:
 * @property-read Finder $finder
 * @property-read Module $module
 * @property-read Mailer $mailer
 *
 * @author Dmitry Erofeev <dmeroff@gmail.com>
 */

class User extends \dektrium\user\models\User  {
    const ROLE_USER    = 'user';
    const ROLE_ADMIN   = 'admin';
    const ROLE_APRILL  = 'user-aprill';
    const ROLE_MODERATOR = 'moderator';

	public function scenarios()
	{
		$scenarios = parent::scenarios();
		// add field to scenarios
		$fields = [
			'first_name',
			'last_name',
			'middle_name',
			'bithday',
			'phone',
			'position_id',
			'theme',
			'avatar',
		];
		foreach ($fields as $field){
			$scenarios['create'][]   = $field;
			$scenarios['update'][]   = $field;
			$scenarios['register'][] = $field;
		}
		return $scenarios;
	}

	public function behaviors()
	{
		$behaviors = parent::behaviors();
		$behaviors['phoneInput'] = PhoneInputBehavior::className();
		return $behaviors;
	}

	/**
	 * @inheritdoc
	 */
	public function attributeLabels()
	{
		return [
			'username'          => \Yii::t('user', 'Username'),
			'email'             => \Yii::t('user', 'Email'),
			'registration_ip'   => \Yii::t('user', 'Registration ip'),
			'unconfirmed_email' => \Yii::t('user', 'New email'),
			'password'          => \Yii::t('user', 'Password'),
			'created_at'        => \Yii::t('user', 'Registration time'),
			'confirmed_at'      => \Yii::t('user', 'Confirmation time'),
			'first_name'        => 'Имя',
			'last_name'         => 'Фамилия',
			'middle_name'       => 'Отчество',
			'bithday'           => 'День рождения',
			'phone'             => 'Телефон',
			'position_id'       => 'Должность',
			'theme'             => 'Тема оформления',
			'avatar'            => 'Аватар',
		];
	}

	public function rules()
	{
		$rules = parent::rules();
		// add some rules
		/*
		$rules['fieldRequired'] = ['field', 'required'];
		$rules['fieldLength']   = ['field', 'string', 'max' => 10];
		*/

		return $rules + [
				[['phone'], PhoneInputValidator::className()/*, 'region' => ['RU']*/],
				[['first_name', 'last_name', 'middle_name'], 'string', 'max' => 255],
				[['bithday'], 'date', 'format' => 'Y-m-d'],
				[['position_id'], 'integer'],
				[['position_id'], 'exist', 'skipOnError' => true, 'targetClass' => Position::className(), 'targetAttribute' => ['position_id' => 'id']],
				[['theme'], 'in', 'range' => ['light', 'dark']],
				[['avatar'], 'string', 'max' => '255'],
		];
	}

	public function register() {
		return parent::register(); // TODO: Change the autogenerated stub
	}

	public static function findByUsername($username){
		return User::find()->where(['username' => $username])->one();
	}

	public function validatePassword($password){
		return Password::validate($password, $this->password_hash);
	}

	public function initiales(){
		$parts = [
			$this->first_name,
			$this->middle_name,
			$this->last_name,
		];
		$i = '';
		foreach ($parts as $part){
			if ($part){
				if (mb_strlen($i) < 2){
					$i .= ucfirst(mb_substr($part, 0, 1, 'UTF-8'));
				}
			}
		}
		return $i;
	}

	public function getName(){
		return $this->first_name.' '.$this->last_name;
	}

	public function getAvatar(){
        if ($this->avatar) {
            return Html::img($this->avatar, ['alt' => $this->initiales(), 'class' => 'user-avatar']);
        } else {
			return '<span class="user-avatar user-initiales">'. $this->initiales() .'</span>';
        }
	}
}
<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "fileshare_category".
 *
 * @property integer $id
 * @property integer $parent_id
 * @property string $name
 * @property string $created_at
 * @property string $updated_at
 * @property integer $size
 * @property integer $user_id
 *
 * @property FileshareCategory $parent
 * @property FileshareCategory[] $childs
 * @property User $user
 * @property FileshareFile[] $fileshareFiles
 */
class FileshareCategory extends \yii\db\ActiveRecord
{
	const PER_USER_SIZE_LIMIT = 10*1000*1000*1000;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'fileshare_category';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['parent_id', 'size', 'user_id'], 'integer'],
            [['name'], 'required'],
            [['created_at', 'updated_at'], 'safe'],
            [['name'], 'string', 'max' => 255],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => FileshareCategory::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
	        'id' => 'ID',
	        'parent_id' => 'Родитель',
	        'name' => 'Название папки',
	        'created_at' => 'Создана',
	        'updated_at' => 'Обновлена',
	        'size' => 'Размер',
	        'user_id' => 'Владелец',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(FileshareCategory::className(), ['id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChilds()
    {
        return $this->hasMany(FileshareCategory::className(), ['parent_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFileshareFiles()
    {
        return $this->hasMany(FileshareFile::className(), ['parent_id' => 'id']);
    }

	public function recalcSize(){
		$this->size = 0;
		foreach ($this->childs as $one){
			$this->size += $one->size;
		}

		foreach ($this->fileshareFiles as $file){
			$this->size += $file->size;
		}
		$this->save();
		if ($this->parent) {
			$this->parent->recalcSize();
		}
	}

	public function getIcon($class='', $alt=''){
		return "<img src='/img/fs/folder.png' class='{$class}' alt='{$alt}'>";
	}

	public function beforeSave( $insert ) {
		if (!$this->user_id) $this->user_id = Yii::$app->user->id;
		return parent::beforeSave( $insert ); // TODO: Change the autogenerated stub
	}

	public function beforeDelete() {
		if ($result = parent::beforeDelete()){
			foreach ($this->fileshareFiles as $one){
				$one->delete();
			}

			foreach ($this->childs as $one){
				$one->delete();
			}
		};
		return $result;
	}

	public function relativeTime(){
		$time = $this->updated_at?$this->updated_at:$this->created_at;
		$time = Yii::$app->formatter->asTimestamp(date(\DateTime::W3C, strtotime($time)));
		if ((time() - $time) > 60*60*24) {
			return "<span title='".Yii::$app->formatter->asDatetime($time)."'>".Yii::$app->formatter->asDatetime($time, 'php:d.m.Y')."</span>";
		} else {
			return Yii::$app->formatter->asRelativeTime($time, time());
		}
	}

	public static function getTree($root = null, $level = 0){
		$tree = $level?"":"<option value=''>[ корень ]</option>";
		$models = FileshareCategory::find()->where(['parent_id' => $root, 'user_id' => Yii::$app->user->id])->orderBy(['name' => SORT_ASC])->all();
		foreach ($models as $model){
			$name  = str_pad('', $level, '-', STR_PAD_LEFT).$model->name;
			$tree .= "<option value='{$model->id}'>{$name}</option>";
			$tree .= self::getTree($model->id, $level+1);
		}
		return $tree;
	}

	public function checkAccess($allowAdmin = false){
		return ($this->user_id == Yii::$app->user->id || ($allowAdmin && Yii::$app->user->can('admin')));
	}

	public static function getUserSize(){
		$rootFileSize = FileshareFile::find()->where(['user_id' => Yii::$app->user->id, 'parent_id' => null])->sum('size');
		$rootCategorySize = FileshareCategory::find()->where(['user_id' => Yii::$app->user->id, 'parent_id' => null])->sum('size');
		return $rootCategorySize + $rootFileSize;
	}
}
